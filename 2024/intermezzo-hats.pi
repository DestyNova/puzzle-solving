% See: https://www.theguardian.com/science/2024/dec/09/can-you-solve-it-that-sally-rooney-hat-puzzle

% A liar who always lies says “All my hats are green.”
% 
% Can we conclude that he has some hats?
% 
% In fact, I would like to extend the puzzle by making it multiple choice. Which, if any, of the following statements can we conclude from what the liar has said?
% 
% A) The liar has at least one hat.
% B) The liar has only one green hat.
% C) The liar has no hats.
% D) The liar has at least one green hat.
% E) The liar has no green hats.

import cp.

main =>
  N = 5,
  println(n=N),
  Things = new_array(N),
  Things :: 1..3, % 1 = hat, 2 = microscope, 3 = cabbage
  Colours = new_array(N),
  Colours :: 1..3, % 1 = green, 2 = blue, 3 = some other colour

  Hat_count :: 0..N,
  count(1, Things, Hat_count),
  Green_hats = new_array(N),
  Green_hats :: 0..1,

  foreach (I in 1..N)
    Green_hats[I] #= cond(Things[I] #= 1 #/\ Colours[I] #= 1, 1, 0),
  end,

  #~ sum(Green_hats) #= Hat_count,

  printf("Possible amounts of hats: %w\n", solve_all([], Hat_count)),

  Statement_A #<=> Hat_count #> 0,
  Result_A = solve_all([], Statement_A),
  printf("A) The liar has at least one hat: %w\n", Result_A),

  Statement_B #<=> sum(Green_hats) #= 1,
  Result_B = solve_all([], Statement_B),
  printf("B) The liar has only one green hat: %w\n", Result_B),

  Statement_C #<=> Hat_count #= 0,
  Result_C = solve_all([], Statement_C),
  printf("C) The liar has no hats: %w\n", Result_C),

  Statement_D #<=> sum(Green_hats) #> 0,
  Result_D = solve_all([], Statement_D),
  printf("D) The liar has at least one green hat: %w\n", Result_D),

  Statement_E #<=> sum(Green_hats) #= 0,
  Result_E = solve_all([], Statement_E),
  printf("E) The liar has no green hats: %w\n", Result_E).
